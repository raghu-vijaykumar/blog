<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Composite on Raghu Vijaykumar</title>
    <link>https://raghu-vijaykumar.github.io/blog/tags/composite/</link>
    <description>Recent content in Composite on Raghu Vijaykumar</description>
    <image>
      <title>Raghu Vijaykumar</title>
      <url>https://raghu-vijaykumar.github.io/blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://raghu-vijaykumar.github.io/blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.127.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Aug 2024 14:46:15 +0000</lastBuildDate>
    <atom:link href="https://raghu-vijaykumar.github.io/blog/tags/composite/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Composite Pattern</title>
      <link>https://raghu-vijaykumar.github.io/blog/docs/system-design/design-patterns/composite/readme/</link>
      <pubDate>Sat, 24 Aug 2024 14:46:15 +0000</pubDate>
      <guid>https://raghu-vijaykumar.github.io/blog/docs/system-design/design-patterns/composite/readme/</guid>
      <description>The Composite Design Pattern is a structural design pattern that allows you to treat individual objects and compositions of objects uniformly. This pattern provides a way to group objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly, thereby simplifying the client code.
Motivation In software development, there are scenarios where you need to work with both individual objects and collections of objects.</description>
    </item>
  </channel>
</rss>
