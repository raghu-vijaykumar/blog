<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Decorator on Raghu Vijaykumar</title>
    <link>https://raghu-vijaykumar.github.io/blog/tags/decorator/</link>
    <description>Recent content in Decorator on Raghu Vijaykumar</description>
    <image>
      <title>Raghu Vijaykumar</title>
      <url>https://raghu-vijaykumar.github.io/blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://raghu-vijaykumar.github.io/blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.127.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Aug 2024 14:46:15 +0000</lastBuildDate>
    <atom:link href="https://raghu-vijaykumar.github.io/blog/tags/decorator/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Decorator Pattern</title>
      <link>https://raghu-vijaykumar.github.io/blog/docs/system-design/design-patterns/decorator/readme/</link>
      <pubDate>Sat, 24 Aug 2024 14:46:15 +0000</pubDate>
      <guid>https://raghu-vijaykumar.github.io/blog/docs/system-design/design-patterns/decorator/readme/</guid>
      <description>The Decorator Pattern is a structural design pattern used to add additional behaviors or responsibilities to objects dynamically. Unlike subclassing, where additional functionality is achieved through inheritance, the decorator pattern allows the augmentation of an objectâ€™s behavior without modifying its structure or the need for inheritance. This promotes adherence to the Open/Closed Principle and Single Responsibility Principle in software design.
Motivation The main motivation for using the decorator pattern is to add features or functionality to existing objects in a flexible and reusable way.</description>
    </item>
  </channel>
</rss>
