<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>System-Design on Raghu Vijaykumar</title>
    <link>https://raghu-vijaykumar.github.io/blog/tags/system-design/</link>
    <description>Recent content in System-Design on Raghu Vijaykumar</description>
    <image>
      <title>Raghu Vijaykumar</title>
      <url>https://raghu-vijaykumar.github.io/blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://raghu-vijaykumar.github.io/blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.127.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Aug 2024 05:54:50 +0000</lastBuildDate>
    <atom:link href="https://raghu-vijaykumar.github.io/blog/tags/system-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Builder Pattern</title>
      <link>https://raghu-vijaykumar.github.io/blog/docs/system-design/design-patterns/builder/readme/</link>
      <pubDate>Sat, 24 Aug 2024 05:54:50 +0000</pubDate>
      <guid>https://raghu-vijaykumar.github.io/blog/docs/system-design/design-patterns/builder/readme/</guid>
      <description>Builder Pattern The Builder Design Pattern is a creational pattern that provides a way to construct complex objects step by step. Unlike the abstract factory pattern, the builder pattern is more about constructing a single object, rather than families of objects.
Why Use the Builder Pattern? The Builder pattern is particularly useful when:
Complex Object Construction: When an object requires multiple steps to construct, where each step may involve different parts of the object.</description>
    </item>
    <item>
      <title>Design Patterns</title>
      <link>https://raghu-vijaykumar.github.io/blog/docs/system-design/design-patterns/readme/</link>
      <pubDate>Sat, 24 Aug 2024 05:54:50 +0000</pubDate>
      <guid>https://raghu-vijaykumar.github.io/blog/docs/system-design/design-patterns/readme/</guid>
      <description>Design Patterns Before we get to the design patterns themselves, there is just one more piece of housekeeping that I wanted to mention, and that is to do with the so-called Gamma categorization.
Typically, in design pattern literature, regardless of which language of design patterns we are talking about, we split all the design patterns into several different categories. These categories are often called Gamma categorization, named after Erich Gamma, one of the authors of the original Gang of Four book that uses C++ and Smalltalk.</description>
    </item>
    <item>
      <title>Solid Principles</title>
      <link>https://raghu-vijaykumar.github.io/blog/docs/system-design/solid-principles/readme/</link>
      <pubDate>Sat, 24 Aug 2024 05:54:50 +0000</pubDate>
      <guid>https://raghu-vijaykumar.github.io/blog/docs/system-design/solid-principles/readme/</guid>
      <description>Solid Principles Single Responsibility Principle (SRP) The Single Responsibility Principle (SRP) is one of the five SOLID principles of object-oriented design and programming. It states that a class, module, or function should have only one reason to change, meaning it should have only one responsibility or job. This principle promotes the idea that a class should only have one reason to exist, encapsulating all the functionality related to that responsibility.</description>
    </item>
    <item>
      <title>Architectural Patterns</title>
      <link>https://raghu-vijaykumar.github.io/blog/docs/system-design/architectural-patterns/readme/</link>
      <pubDate>Sat, 24 Aug 2024 05:54:49 +0000</pubDate>
      <guid>https://raghu-vijaykumar.github.io/blog/docs/system-design/architectural-patterns/readme/</guid>
      <description>Architectural Building Blocks API Gateway Overview An API Gateway is an API management service that acts as an intermediary between clients and backend services. It uses the API composition pattern to aggregate multiple backend services into a single API endpoint that clients interact with. This abstraction provides several key benefits:
Benefits of an API Gateway Seamless Internal Changes:
Facilitates internal system changes without impacting external API consumers. For example, it enables the splitting of a frontend service into different services for various devices without altering the external API.</description>
    </item>
    <item>
      <title>System Design</title>
      <link>https://raghu-vijaykumar.github.io/blog/docs/system-design/readme/</link>
      <pubDate>Sat, 24 Aug 2024 05:54:49 +0000</pubDate>
      <guid>https://raghu-vijaykumar.github.io/blog/docs/system-design/readme/</guid>
      <description>Understanding the Importance of System Design in Software Engineering System design is essential in software engineering because it ensures that software systems are scalable, reliable, maintainable, performant, cost-effective, secure, adaptable, and user-friendly. By investing time and effort into designing robust and efficient systems, organizations can build high-quality software products that meet the needs of their users and stakeholders.
Requirements Gathering, Classifying, and Analyzing Purpose:
Determine what needs to be built for the client.</description>
    </item>
  </channel>
</rss>
